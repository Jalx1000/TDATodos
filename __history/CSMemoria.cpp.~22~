//---------------------------------------------------------------------------

#pragma hdrstop

#include "CSMemoria.h"
//---------------------------------------------------------------------------
#include <iomanip>
#include <sstream>
#include <iostream>
#pragma package(smart_init)

CSMemoria::CSMemoria()
{
    mem = new NodoM[MAX_MEMORIA];
    for (int i = 0; i < MAX_MEMORIA; i++) {
        mem[i].dato = 0;
        mem[i].link = i + 1;
    }
    mem[MAX_MEMORIA - 1].link = -1;
    libre = 0;
}

int Numero_lds(string cadena)
{
    int cont = 0;
    for (int i = 0; i < cadena.length(); i++) {
        if (cadena[i] == ',') {
            cont++;
        }
    }

    cont += (cadena.empty() ? 0 : 1);
    return cont;
}
string Obtener_id(string cadena, int n)
{
    string palabra = "";
    int contador = 0;
    int i = 0;
    while (contador < n - 1 && i < cadena.length() - 1) {
        if (cadena.at(i) == ',') {
            contador += 1;
            cadena = cadena.substr(
                i + 1, cadena.length() - (cadena.substr(0, i).length()));
            i = -1;
        }
        i += 1;
    }
    i = 0;
    while (cadena[i] != ',' && i < cadena.length()) {
        i += 1;
    }
    palabra = cadena.substr(0, i);

    return palabra;
}

//cadena="juan,perez"
direccion_mem CSMemoria::new_espacio(string cadena)
{
    int cant = Numero_lds(cadena); //2
    int dir = libre; //0
    int d = libre; //0
    for (int i = 1; i <= cant - 1; i++) {
        mem[d].id = Obtener_id(cadena, i);
        /*cout<<"|"<<setw(3)<<d<<"|"<<setw(4)<<
			mem[d].dato<<"|"<<setw(8)<<mem[d].id<<
			"|"<<setw(4)<<mem[d].link<<"|\n";  */
        d = mem[d].link; //1;
    }
    libre = mem[d].link;
    mem[d].link = -1;
    mem[d].id = Obtener_id(cadena, cant); //Perez
    /*  cout<<"|"<<setw(3)<<d<<"|"<<setw(4)<<
			mem[d].dato<<"|"<<setw(8)<<mem[d].id<<
			"|"<<setw(4)<<mem[d].link<<"|\n";     */
    return dir;
}
void eliminarFlecha(string &cadena)
{
    int index = 0;
    if (cadena != "") {
        while (cadena[index] != '-' && cadena[index + 1] != '>') {
            index += 1;
        }
        cadena = cadena.substr(index + 2,
            cadena.length() - (cadena.substr(0, index + 1).length()));
    }
}

//(2               ,"->40253",      100)
void CSMemoria::poner_dato(direccion_mem dir, string id, int valor)
{
    int z = dir; //2
    eliminarFlecha(id);
    while (z != NULO) {
        if (mem[z].id == id) { //40253== 40253

            mem[z].dato = valor;
        }
        z = mem[z].link;
    }
} /*
			  La y es: 2
			+----------------------+
			|DIR|DATO|---ID---|LINK|
			|  0|   0|    juan|   1|
			|  1|   0|   Perez|  -1|
			|  2| 100|   40253|  -1|
			|  3|   0|  INF220|   4|
			|  4|   0|      SA|  -1|
libre=5		|  5|   0|        |   6|
			|  6|   0|        |   7|
			|  7|   0|        |   8|
			|  8|   0|        |   9|
			|  9|   0|        |  10|
			| 10|   0|        |  -1|
			+----------------------+  */			      //2
void CSMemoria::delete_espacio(direccion_mem dir)
{
    int x = dir;
    int prev = -1;

    // Buscar el nodo anterior al nodo a eliminar
    while (mem[x].link != -1) {
        prev = x;
        x = mem[x].link;
    }

    // Si el nodo a eliminar es el primer nodo
    if (prev == -1) {
        libre = mem[x].link;
    } else {
        mem[prev].link = mem[x].link;
    }

    mem[x].link = libre;
    libre = x;
}

int CSMemoria::obtenerDato(direccion_mem dir, string cadena_id)
{
    int z = dir;
    bool ex = false;
    eliminarFlecha(cadena_id);
    while ((z != NULO) && (!ex)) {
        if (mem[z].id == cadena_id) {
            return mem[z].dato;
        }
        z = mem[z].link;
    }

    return NULO;
}

int CSMemoria::Espacio_disponible()
{
    int x = libre;
    short c = 0;
    while (x != NULO) {
        c++;
        x = mem[x].link;
    }
    return c;
}

int CSMemoria::Espacio_ocupado()
{
    short c = (MAX_MEMORIA)-Espacio_disponible();
    return c;
}

bool CSMemoria::dir_libre(direccion_mem dir)
{
    int x = libre;
    int c = false;
    while (x != NULO && c == false) {
        if (x == dir) {
            c = true;
        }
        x = mem[x].link;
    }
    return c;
}
void CSMemoria::mostrar_memoria()
{
    cout << "+";
    for (int i = 2; i <= 3 + 4 + 8 + 3 + 5; i = i + 1) {
        cout << "-";
    };
    cout << "+"
         << "\n";
    cout << "|DIR|"
         << "DATO|"
         << "---ID---|"
         << "LINK|\n";
    for (int i = 0; i < MAX_MEMORIA; i = i + 1) {
        cout << "|" << setw(3) << i << "|" << setw(4) << mem[i].dato << "|"
             << setw(8) << mem[i].id << "|" << setw(4) << mem[i].link << "|\n";
    };
    cout << "+";
    for (int i = 2; i <= 2 + 4 + 8 + 4 + 5; i = i + 1) {
        cout << "-";
    };
    cout << "+\n";
    cout << "LIBRE:" << libre << "\n";
    //cout<<"ESPACIO DISPONIBLE:"<<Espacio_disponible()<<"\n";
    //	cout<<"ESPACIO OCUPADO:"<<Espacio_ocupado()<<"\n";
}
void CSMemoria::mostrar()
{
    stringstream oc;
    stringstream lb;
    oc << "        OCUPADOS         \n"
       << "+---------------------- +\n"
       << "|DIR|"
       << "DATO|"
       << "---ID----|"
       << "LINK|\n"
       << setfill(' ');
    string ocupados;
    lb << "          LIBRES         \n"
       << "+---------------------- +\n"
       << "|DIR|"
       << "DATO|"
       << "---ID----|"
       << "LINK|\n";
    string libres;

    for (int i = 0; i < MAX_MEMORIA; i++) {
        if (dir_libre(i)) {
            lb << "|" << setw(3) << i << "|" << setw(4) << mem[i].dato << "|"
               << setw(9) << mem[i].id << "|" << setw(4) << mem[i].link
               << "|\n";
        }
        if (!(dir_libre(i))) {
            oc << "|" << setw(3) << i << "|" << setw(4) << mem[i].dato << "|"
               << setw(9) << mem[i].id << "|" << setw(4) << mem[i].link
               << "|\n";
        }
    }

    oc << "+-----------------------+\n";
    lb << "+-----------------------+\n";
    cout << oc.str() << lb.str();
    cout << "+\n";
    cout << "LIBRE:" << libre << "\n";
    cout << "ESPACIO DISPONIBLE:" << Espacio_disponible() << "\n";
    cout << "ESPACIO OCUPADO:" << Espacio_ocupado();
}

